"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNativeFunction = isNativeFunction;
exports.isFunction = isFunction;
exports.isIterable = isIterable;
exports.isString = isString;
exports.isNumber = isNumber;
exports.isInteger = isInteger;
exports.isFloat = isFloat;
exports.isPromise = isPromise;
exports.isBoolean = isBoolean;
exports.isRegExp = isRegExp;
exports.isDate = isDate;
exports.isSet = isSet;
exports.isMap = isMap;
exports.isWeakMap = isWeakMap;
exports.isArray = isArray;
exports.isNull = isNull;
exports.isUndefined = isUndefined;
exports.isNullish = isNullish;
exports.isNil = isNil;
exports.isObject = isObject;
exports.isNaN = isNaN;
exports.isPlainObject = isPlainObject;
exports.isSymbol = isSymbol;
exports.isError = isError;

function isNativeFunction(obj) {
  return isFunction(obj) && obj.toString().endsWith('{ [native code] }');
}

function isFunction(obj) {
  return typeof obj === 'function';
}

function isIterable(obj) {
  return obj && isFunction(obj[Symbol.iterator]);
}

function isString(obj) {
  return typeof obj === 'string' || obj instanceof String;
}

function isNumber(obj) {
  return typeof obj === 'number' || obj instanceof Number;
}

function isInteger(obj) {
  return isNumber(obj) && obj === (obj | 0);
}

function isFloat(obj) {
  return isNumber(obj) && obj !== (obj | 0);
}

function isPromise(obj) {
  return obj instanceof Promise;
}

function isBoolean(obj) {
  return obj === true || obj === false;
}

function isRegExp(obj) {
  return obj instanceof RegExp;
}

function isDate(obj) {
  return obj instanceof Date;
}

function isSet(obj) {
  return obj instanceof Set;
}

function isMap(obj) {
  return obj instanceof Map;
}

function isWeakMap(obj) {
  return obj instanceof WeakMap;
}

function isArray(obj) {
  return Array.isArray(obj);
}

function isNull(obj) {
  return obj === null;
}

function isUndefined(obj) {
  return obj === undefined;
}

function isNullish(obj) {
  return obj === null || obj === undefined || obj !== obj;
}

function isNil(obj) {
  return obj === null || obj === undefined;
}

function isObject(obj) {
  return obj != null && typeof obj === 'object';
}

function isNaN(obj) {
  return obj !== obj;
}

function isPlainObject(obj) {
  if (!isObject(obj)) return false;
  const proto = Object.getPrototypeOf(obj);
  return proto === null || proto === Object.prototype;
}

function isSymbol(obj) {
  return Object.prototype.toString.call(obj) === '[object Symbol]';
}

function isError(obj) {
  return obj instanceof Error;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,