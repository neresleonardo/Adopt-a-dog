/// <reference types="node" />
import moment from 'moment-timezone';
export declare class SqlFrag {
    private readonly sql;
    constructor(sql: string);
    toString(): void;
    toSqlString(): string;
}
/**
 * @deprecated
 */
export declare function raw(...args: Parameters<typeof sql.raw>): SqlFrag;
/**
 * @deprecated Use sql.as instead.
 */
export declare function selectAs(fields: Record<string, string>): SqlFrag;
/**
 * @deprecated
 */
export declare function set(...args: Parameters<typeof sql.set>): SqlFrag;
/**
 * @deprecated
 */
export declare function timestamp(...args: Parameters<typeof sql.timestamp>): SqlFrag;
/**
 * @deprecated
 */
export declare function point(...args: Parameters<typeof sql.point>): SqlFrag;
/**
 * @deprecated
 */
export declare function polygon(...args: Parameters<typeof sql.polygon>): SqlFrag;
export declare function escapeValue(value: Value): SqlFrag;
export declare function escapeLike(value: string, escChar?: string): string;
export declare function escapeId(id: Id): SqlFrag;
declare type SingleUnescapedValue = string | number | Buffer | bigint | boolean | null;
declare type SingleValue = SingleUnescapedValue | SqlFrag;
declare type Value = SingleValue | SingleValue[];
declare type UnescapedId = string | [string] | [string, string] | [string, string, string];
declare type Id = UnescapedId | SqlFrag;
export declare function date(value: Date | string | number | moment.Moment, outputTimezone?: string, inputTimezone?: string): SqlFrag;
interface Point {
    x: number;
    y: number;
}
interface LatLng {
    lat: number;
    lng: number;
}
declare type NumberPair = [number, number];
declare type PointArray = NumberPair[] | Point[] | LatLng[];
/**
 * @deprecated Experimental.
 */
export declare enum IntervalUnit {
    MICROSECOND = "MICROSECOND",
    MILLISECOND = "MILLISECOND",
    SECOND = "SECOND",
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR"
}
/**
 * @deprecated Experimental.
 */
export declare function interval(value: number, unit?: IntervalUnit): SqlFrag;
export declare function sql(strings: TemplateStringsArray, ...values: Value[]): SqlFrag;
export interface InsertOptions {
    /**
     * Ignore duplicate records.
     */
    ignoreDupes?: boolean;
    updateOnDupe?: boolean;
    ignore?: boolean;
}
export declare namespace sql {
    function set(fields: Record<string, Value> | Array<[Id, Value]>): SqlFrag;
    function insert<Schema extends object = Record<string, Value>>(table: Id, data: Partial<Schema> | Array<[Id, Value]>, options?: InsertOptions): SqlFrag;
    function as(fields: Record<string, Id> | Array<[Id, string]>): SqlFrag;
    function raw(sqlString: string | SqlFrag): SqlFrag;
    function timestamp(value: moment.MomentInput, outputTimezone?: string | null, inputTimezone?: string | null, fsp?: number | null): SqlFrag;
    function point(x: number, y: number): SqlFrag;
    function polygon(points: PointArray, autoComplete?: boolean): SqlFrag;
}
export {};
