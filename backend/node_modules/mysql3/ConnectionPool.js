"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectionPool = void 0;

var mysql = _interopRequireWildcard(require("mysql"));

var _Sql = require("./Sql");

var _cliHighlight = _interopRequireDefault(require("cli-highlight"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function typeCast(field, next) {
  switch (field.type) {
    case 'DATE':
    case 'DATETIME':
    case 'DATETIME2':
    case 'NEWDATE':
    case 'TIMESTAMP':
    case 'TIMESTAMP2':
      return field.string();

    case 'LONGLONG':
      const numberString = field.string();
      return numberString === null ? null : BigInt(numberString);

    case 'BIT':
      if (field.length === 1) {
        const buf = field.buffer();
        return buf === null ? null : buf[0] === 1;
      }

      break;
  }

  return next();
}

class ConnectionPool {
  constructor(config) {
    this.config = {
      timezone: 'Z',
      charset: 'utf8mb4',
      typeCast,
      ...config
    };
    let {
      sqlMode,
      foreignKeyChecks,
      safeUpdates,
      printQueries,
      initSql,
      ...other
    } = this.config;
    this.pool = mysql.createPool(other);
    const connQueries = initSql ? [...initSql] : [];

    if (sqlMode != null) {
      connQueries.push(_Sql.sql`SET sql_mode=${Array.isArray(sqlMode) ? sqlMode.join(',') : sqlMode}`);
    }

    if (foreignKeyChecks != null) {
      connQueries.push(_Sql.sql`SET foreign_key_checks=${foreignKeyChecks ? 1 : 0}`);
    }

    if (safeUpdates) {
      connQueries.push(_Sql.sql`SET sql_safe_updates=${safeUpdates ? 1 : 0}`);
    }

    if (connQueries.length) {
      this.pool.on('connection', _conn => {
        const conn = this._wrap(_conn);

        for (const query of connQueries) {
          conn.query(query);
        }
      });
    }
  }

  query(query) {
    return this.withConnection(conn => conn.query(query));
  }

  async row(query) {
    const rows = await this.query(_Sql.sql`select * from (${query}) _query limit 1`);
    return rows.length ? rows[0] : null;
  }

  async value(query) {
    const row = await this.row(query);

    if (row != null) {
      const keys = Object.keys(row);
      if (keys.length !== 1) throw new Error(`Expected exactly 1 field in query, got ${keys.length}`);
      return row[keys[0]];
    }

    return null;
  }

  exec(query) {
    return this.withConnection(conn => conn.query(query));
  }

  async *stream(query) {
    const sql = query.toSqlString();

    if (this.config.printQueries) {
      const hisql = (0, _cliHighlight.default)(sql, {
        language: 'sql',
        ignoreIllegals: true
      });
      console.log(hisql);
    }

    let results = [];
    let resolve;
    let promise = new Promise(r => resolve = r);
    let done = false;
    this.pool.query(sql).on('error', err => {
      throw err;
    }).on('result', row => {
      results.push(row);
      resolve();
      promise = new Promise(r => resolve = r);
    }).on('end', () => {
      done = true;
      resolve();
    });

    for (;;) {
      await promise;
      yield* results;
      if (done) break;
      results = [];
    }
  }

  withConnection(callback) {
    return new Promise((resolve, reject) => {
      this.pool.getConnection(async (err, conn) => {
        if (err) return reject(err);

        try {
          resolve(callback(this._wrap(conn)));
        } finally {
          conn.release();
        }
      });
    });
  }

  transaction(callback) {
    if (Array.isArray(callback)) {
      return this.transaction(async conn => {
        const results = await Promise.allSettled(callback.map(sql => conn.query(sql)));
        const mapped = zip(callback, results).map((x, i) => ({
          index: i,
          query: x[0],
          result: x[1]
        }));
        const errors = mapped.filter(r => r.result.status === 'rejected');
        if (errors.length) throw Error(`${errors.length} quer${errors.length === 1 ? 'y' : 'ies'} failed:${errors.map(err => `\n[${err.index}] ${err.query.toSqlString()} :: ${err.result.reason}`).join('')}`);
        return results;
      });
    }

    return this.withConnection(async conn => {
      await conn.query(_Sql.sql`START TRANSACTION`);
      let result;

      try {
        result = await callback(conn);
      } catch (err) {
        await conn.query(_Sql.sql`ROLLBACK`);
        throw err;
      }

      await conn.query(_Sql.sql`COMMIT`);
      return result;
    });
  }

  _wrap(conn) {
    return new PoolConnection(conn, !!this.config.printQueries);
  }

  close() {
    return new Promise((resolve, reject) => {
      this.pool.end(err => {
        if (err) return reject(err);
        resolve();
      });
    });
  }

}

exports.ConnectionPool = ConnectionPool;

function zip(a, b) {
  if (a.length !== b.length) throw new Error("Cannot zip arrays; lengths differ");
  return a.map((x, i) => [x, b[i]]);
}

class PoolConnection {
  constructor(conn, printQueries) {
    this.conn = conn;
    this.printQueries = printQueries;
  }

  query(query) {
    return new Promise((resolve, reject) => {
      const sql = query.toSqlString();

      if (this.printQueries) {
        const hisql = (0, _cliHighlight.default)(sql, {
          language: 'sql',
          ignoreIllegals: true
        });
        console.log(hisql);
      }

      this.conn.query(sql, (error, results, fields) => {
        if (error) return reject(error);
        resolve(results);
      });
    });
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Db25uZWN0aW9uUG9vbC50cyJdLCJuYW1lcyI6WyJ0eXBlQ2FzdCIsImZpZWxkIiwibmV4dCIsInR5cGUiLCJzdHJpbmciLCJudW1iZXJTdHJpbmciLCJCaWdJbnQiLCJsZW5ndGgiLCJidWYiLCJidWZmZXIiLCJDb25uZWN0aW9uUG9vbCIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwidGltZXpvbmUiLCJjaGFyc2V0Iiwic3FsTW9kZSIsImZvcmVpZ25LZXlDaGVja3MiLCJzYWZlVXBkYXRlcyIsInByaW50UXVlcmllcyIsImluaXRTcWwiLCJvdGhlciIsInBvb2wiLCJteXNxbCIsImNyZWF0ZVBvb2wiLCJjb25uUXVlcmllcyIsInB1c2giLCJzcWwiLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIiwib24iLCJfY29ubiIsImNvbm4iLCJfd3JhcCIsInF1ZXJ5Iiwid2l0aENvbm5lY3Rpb24iLCJyb3ciLCJyb3dzIiwidmFsdWUiLCJrZXlzIiwiT2JqZWN0IiwiRXJyb3IiLCJleGVjIiwic3RyZWFtIiwidG9TcWxTdHJpbmciLCJoaXNxbCIsImxhbmd1YWdlIiwiaWdub3JlSWxsZWdhbHMiLCJjb25zb2xlIiwibG9nIiwicmVzdWx0cyIsInJlc29sdmUiLCJwcm9taXNlIiwiUHJvbWlzZSIsInIiLCJkb25lIiwiZXJyIiwiY2FsbGJhY2siLCJyZWplY3QiLCJnZXRDb25uZWN0aW9uIiwicmVsZWFzZSIsInRyYW5zYWN0aW9uIiwiYWxsU2V0dGxlZCIsIm1hcCIsIm1hcHBlZCIsInppcCIsIngiLCJpIiwiaW5kZXgiLCJyZXN1bHQiLCJlcnJvcnMiLCJmaWx0ZXIiLCJzdGF0dXMiLCJyZWFzb24iLCJQb29sQ29ubmVjdGlvbiIsImNsb3NlIiwiZW5kIiwiYSIsImIiLCJlcnJvciIsImZpZWxkcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUNBOzs7Ozs7OztBQXNFQSxTQUFTQSxRQUFULENBQWtCQyxLQUFsQixFQUFvQ0MsSUFB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QUFsQixFQUEwQixNQUFNLElBQUlrQyxLQUFKLENBQVUsbUNBQVYsQ0FBTjtBQUMxQixTQUFPb0MsQ0FBQyxDQUFDZCxHQUFGLENBQU0sQ0FBQ0csQ0FBRCxFQUFHQyxDQUFILEtBQVMsQ0FBQ0QsQ0FBRCxFQUFHWSxDQUFDLENBQUNYLENBQUQsQ0FBSixDQUFmLENBQVA7QUFDSDs7QUFFRCxNQUFNTyxjQUFOLENBQXFCO0FBRWpCL0QsRUFBQUEsV0FBVyxDQUFrQnFCLElBQWxCLEVBQTBEZCxZQUExRCxFQUFpRjtBQUFBLFNBQS9EYyxJQUErRCxHQUEvREEsSUFBK0Q7QUFBQSxTQUF2QmQsWUFBdUIsR0FBdkJBLFlBQXVCO0FBRTNGOztBQUVEZ0IsRUFBQUEsS0FBSyxDQUFDQSxLQUFELEVBQStCO0FBQ2hDLFdBQU8sSUFBSW1CLE9BQUosQ0FBWSxDQUFDRixPQUFELEVBQVVPLE1BQVYsS0FBcUI7QUFDcEMsWUFBTWhDLEdBQUcsR0FBR1EsS0FBSyxDQUFDVSxXQUFOLEVBQVo7O0FBQ0EsVUFBSSxLQUFLMUIsWUFBVCxFQUF1QjtBQUNuQixjQUFNMkIsS0FBSyxHQUFHLDJCQUFVbkIsR0FBVixFQUFlO0FBQUNvQixVQUFBQSxRQUFRLEVBQUUsS0FBWDtBQUFrQkMsVUFBQUEsY0FBYyxFQUFFO0FBQWxDLFNBQWYsQ0FBZDtBQUNBQyxRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUosS0FBWjtBQUNIOztBQUNELFdBQUtiLElBQUwsQ0FBVUUsS0FBVixDQUFnQlIsR0FBaEIsRUFBcUIsQ0FBQ3FELEtBQUQsRUFBUTdCLE9BQVIsRUFBaUI4QixNQUFqQixLQUE0QjtBQUM3QyxZQUFJRCxLQUFKLEVBQVcsT0FBT3JCLE1BQU0sQ0FBQ3FCLEtBQUQsQ0FBYjtBQUNYNUIsUUFBQUEsT0FBTyxDQUFDRCxPQUFELENBQVA7QUFDSCxPQUhEO0FBSUgsS0FWTSxDQUFQO0FBV0g7O0FBbEJnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG15c3FsIGZyb20gJ215c3FsJztcbmltcG9ydCB7UG9vbENvbmZpZyBhcyBfUG9vbENvbmZpZywgUG9vbCwgRmllbGRJbmZvIGFzIF9GaWVsZEluZm99IGZyb20gXCJteXNxbFwiO1xuaW1wb3J0IHtzcWwsIFNxbEZyYWd9IGZyb20gJy4vU3FsJztcbmltcG9ydCBoaWdobGlnaHQgZnJvbSAnY2xpLWhpZ2hsaWdodCc7XG5pbXBvcnQge0dlb21ldHJ5VHlwZX0gZnJvbSBcIm15c3FsXCI7XG5pbXBvcnQgU3FsTW9kZSBmcm9tIFwiLi9TcWxNb2RlXCI7XG5pbXBvcnQge1Bvb2xDb25uZWN0aW9uIGFzIF9Qb29sQ29ubmVjdGlvbn0gZnJvbSBcIm15c3FsXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9vbENvbmZpZyBleHRlbmRzIE9taXQ8X1Bvb2xDb25maWcsJ3R5cGVDYXN0J3wnc3VwcG9ydEJpZ051bWJlcnMnfCdiaWdOdW1iZXJTdHJpbmdzJz4ge1xuICAgIC8qKlxuICAgICAqIFByaW50IFNRTCBxdWVyaWVzIHRvIFNURE9VVCBiZWZvcmUgZXhlY3V0aW5nIHRoZW0uXG4gICAgICovXG4gICAgcHJpbnRRdWVyaWVzPzogYm9vbGVhblxuICAgIHR5cGVDYXN0PzogKGZpZWxkOiBGaWVsZEluZm8sIG5leHQ6IE5leHRGbikgPT4gYW55LFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFNldCBpbiBteS5jbmYgdW5kZXIgW215c3FsZF1cbiAgICAgKi9cbiAgICBzcWxNb2RlPzogU3FsTW9kZVtdfHN0cmluZ3xudWxsLFxuICAgIC8qKlxuICAgICAqIEVuYWJsZSBvciBkaXNhYmxlIGZvcmVpZ24ga2V5IGNoZWNrcyBmb3IgdGhlIGN1cnJlbnQgc2Vzc2lvbi4gTWF5IGVhc2UgbWlncmF0aW9uIHNjcmlwdHMsIGJ1dCBub3QgcmVjb21tZW5kZWRcbiAgICAgKiBmb3IgcHJvZHVjdGlvbiB1c2FnZS5cbiAgICAgKi9cbiAgICBmb3JlaWduS2V5Q2hlY2tzPzogYm9vbGVhbnxudWxsLFxuICAgIC8qKlxuICAgICAqIElmIHRoaXMgdmFyaWFibGUgaXMgZW5hYmxlZCwgVVBEQVRFIGFuZCBERUxFVEUgc3RhdGVtZW50cyB0aGF0IGRvIG5vdCB1c2UgYSBrZXkgaW4gdGhlIFdIRVJFIGNsYXVzZSBvciBhIExJTUlUIGNsYXVzZSBwcm9kdWNlIGFuIGVycm9yLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGNhdGNoIFVQREFURSBhbmQgREVMRVRFIHN0YXRlbWVudHMgd2hlcmUga2V5cyBhcmUgbm90IHVzZWQgcHJvcGVybHkgYW5kIHRoYXQgd291bGQgcHJvYmFibHkgY2hhbmdlIG9yIGRlbGV0ZSBhIGxhcmdlIG51bWJlciBvZiByb3dzLlxuICAgICAqXG4gICAgICogQGxpbmsgaHR0cHM6Ly9tYXJpYWRiLmNvbS9rYi9lbi9saWJyYXJ5L3NlcnZlci1zeXN0ZW0tdmFyaWFibGVzLyNzcWxfc2FmZV91cGRhdGVzXG4gICAgICogQGxpbmsgaHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL3NlcnZlci1zeXN0ZW0tdmFyaWFibGVzLmh0bWwjc3lzdmFyX3NxbF9zYWZlX3VwZGF0ZXNcbiAgICAgKiBAZGVwcmVjYXRlZCBTZXQgaW4gbXkuY25mIHVuZGVyIFtteXNxbGRdXG4gICAgICovXG4gICAgc2FmZVVwZGF0ZXM/OiBib29sZWFufG51bGwsXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgU1FMIHN0YXRlbWVudHMgdG8gZXhlY3V0ZSB1cG9uIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgaW5pdFNxbD86IEFycmF5PFNxbEZyYWc+XG59XG5cblxuZXhwb3J0IHR5cGUgTmV4dEZuID0gKCkgPT4gdm9pZFxuZXhwb3J0IHR5cGUgVHlwZXMgPSAnREVDSU1BTCd8J1RJTlknfCdTSE9SVCd8J0xPTkcnfCdGTE9BVCd8J0RPVUJMRSd8J05VTEwnfCdUSU1FU1RBTVAnfCdMT05HTE9ORyd8J0lOVDI0J3wnREFURSd8J1RJTUUnfCdEQVRFVElNRSd8J1lFQVInfCdORVdEQVRFJ3wnVkFSQ0hBUid8J0JJVCd8J1RJTUVTVEFNUDInfCdEQVRFVElNRTInfCdUSU1FMid8J0pTT04nfCdORVdERUNJTUFMJ3wnRU5VTSd8J1NFVCd8J1RJTllfQkxPQid8J01FRElVTV9CTE9CJ3wnTE9OR19CTE9CJ3wnQkxPQid8J1ZBUl9TVFJJTkcnfCdTVFJJTkcnfCdHRU9NRVRSWSdcblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZEluZm8ge1xuICAgIGNhdGFsb2c6IHN0cmluZztcbiAgICBkYjogc3RyaW5nO1xuICAgIHRhYmxlOiBzdHJpbmc7XG4gICAgb3JnVGFibGU6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgb3JnTmFtZTogc3RyaW5nO1xuICAgIGNoYXJzZXROcjogbnVtYmVyO1xuICAgIGxlbmd0aDogbnVtYmVyO1xuICAgIHR5cGU6IFR5cGVzO1xuICAgIGZsYWdzOiBudW1iZXI7XG4gICAgZGVjaW1hbHM6IG51bWJlcjtcbiAgICBkZWZhdWx0Pzogc3RyaW5nO1xuICAgIHplcm9GaWxsOiBib29sZWFuO1xuICAgIHByb3RvY29sNDE6IGJvb2xlYW47XG4gICAgc3RyaW5nKCk6IHN0cmluZyB8IG51bGwsXG4gICAgYnVmZmVyKCk6IEJ1ZmZlciB8IG51bGwsXG4gICAgZ2VvbWV0cnkoKTogR2VvbWV0cnlUeXBlIHwgbnVsbCxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPa1BhY2tldCB7XG4gICAgZmllbGRDb3VudDogbnVtYmVyLFxuICAgIGFmZmVjdGVkUm93czogbnVtYmVyLFxuICAgIGluc2VydElkOiBudW1iZXIsXG4gICAgc2VydmVyU3RhdHVzOiBudW1iZXIsXG4gICAgd2FybmluZ0NvdW50OiBudW1iZXIsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIHByb3RvY29sNDE6IGJvb2xlYW4sXG4gICAgY2hhbmdlZFJvd3M6IG51bWJlclxufVxuXG5cbmZ1bmN0aW9uIHR5cGVDYXN0KGZpZWxkOiBGaWVsZEluZm8sIG5leHQ6IE5leHRGbik6IGFueSB7XG4gICAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgICAgIGNhc2UgJ0RBVEUnOlxuICAgICAgICBjYXNlICdEQVRFVElNRSc6XG4gICAgICAgIGNhc2UgJ0RBVEVUSU1FMic6XG4gICAgICAgIGNhc2UgJ05FV0RBVEUnOlxuICAgICAgICBjYXNlICdUSU1FU1RBTVAnOlxuICAgICAgICBjYXNlICdUSU1FU1RBTVAyJzpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9teXNxbGpzL215c3FsI3R5cGUtY2FzdGluZ1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkLnN0cmluZygpO1xuICAgICAgICBjYXNlICdMT05HTE9ORyc6XG4gICAgICAgICAgICBjb25zdCBudW1iZXJTdHJpbmcgPSBmaWVsZC5zdHJpbmcoKTtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJTdHJpbmcgPT09IG51bGwgPyBudWxsIDogQmlnSW50KG51bWJlclN0cmluZyk7XG4gICAgICAgIGNhc2UgJ0JJVCc6XG4gICAgICAgICAgICBpZiAoZmllbGQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmID0gZmllbGQuYnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZiA9PT0gbnVsbCA/IG51bGwgOiBidWZbMF0gPT09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG5leHQoKTtcbn1cblxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb25Qb29sIHtcbiAgICBwcml2YXRlIHBvb2w6IFBvb2w7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb25maWc6IFBvb2xDb25maWc7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IFBvb2xDb25maWcpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAgICAgICB0aW1lem9uZTogJ1onLFxuICAgICAgICAgICAgY2hhcnNldDogJ3V0ZjhtYjQnLFxuICAgICAgICAgICAgdHlwZUNhc3QsXG4gICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgIH07XG4gICAgICAgIGxldCB7c3FsTW9kZSxmb3JlaWduS2V5Q2hlY2tzLHNhZmVVcGRhdGVzLHByaW50UXVlcmllcyxpbml0U3FsLC4uLm90aGVyfSA9IHRoaXMuY29uZmlnO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICAgIHRoaXMucG9vbCA9IG15c3FsLmNyZWF0ZVBvb2wob3RoZXIpO1xuXG4gICAgICAgIGNvbnN0IGNvbm5RdWVyaWVzID0gaW5pdFNxbCA/IFsuLi5pbml0U3FsXSA6IFtdO1xuICAgICAgICBpZihzcWxNb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbm5RdWVyaWVzLnB1c2goc3FsYFNFVCBzcWxfbW9kZT0ke0FycmF5LmlzQXJyYXkoc3FsTW9kZSkgPyAgc3FsTW9kZS5qb2luKCcsJykgOiBzcWxNb2RlfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmKGZvcmVpZ25LZXlDaGVja3MgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29ublF1ZXJpZXMucHVzaChzcWxgU0VUIGZvcmVpZ25fa2V5X2NoZWNrcz0ke2ZvcmVpZ25LZXlDaGVja3MgPyAxIDogMH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZihzYWZlVXBkYXRlcykge1xuICAgICAgICAgICAgY29ublF1ZXJpZXMucHVzaChzcWxgU0VUIHNxbF9zYWZlX3VwZGF0ZXM9JHtzYWZlVXBkYXRlcyA/IDEgOiAwfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmKGNvbm5RdWVyaWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5wb29sLm9uKCdjb25uZWN0aW9uJywgKF9jb25uOiBfUG9vbENvbm5lY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uID0gdGhpcy5fd3JhcChfY29ubik7XG4gICAgICAgICAgICAgICAgZm9yKGNvbnN0IHF1ZXJ5IG9mIGNvbm5RdWVyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm4ucXVlcnkocXVlcnkpOyAvLyBUT0RPOiBkbyB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZXNlIHF1ZXJpZXMgdG8gZmluaXNoLi4uP1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcXVlcnk8VFJlY29yZCBleHRlbmRzIG9iamVjdD1SZWNvcmQ8c3RyaW5nLGFueT4+KHF1ZXJ5OiBTcWxGcmFnKTogUHJvbWlzZTxUUmVjb3JkW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aENvbm5lY3Rpb24oY29ubiA9PiBjb25uLnF1ZXJ5KHF1ZXJ5KSlcbiAgICB9XG5cbiAgICBhc3luYyByb3c8VFJlY29yZCBleHRlbmRzIG9iamVjdD1SZWNvcmQ8c3RyaW5nLGFueT4+KHF1ZXJ5OiBTcWxGcmFnKTogUHJvbWlzZTxUUmVjb3JkfG51bGw+IHtcbiAgICAgICAgY29uc3Qgcm93cyA9IGF3YWl0IHRoaXMucXVlcnk8VFJlY29yZD4oc3FsYHNlbGVjdCAqIGZyb20gKCR7cXVlcnl9KSBfcXVlcnkgbGltaXQgMWApXG4gICAgICAgIHJldHVybiByb3dzLmxlbmd0aCA/IHJvd3NbMF0gOiBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIHZhbHVlPFRWYWx1ZT1zdHJpbmc+KHF1ZXJ5OiBTcWxGcmFnKTogUHJvbWlzZTxUVmFsdWV8bnVsbD4ge1xuICAgICAgICBjb25zdCByb3cgPSBhd2FpdCB0aGlzLnJvdyhxdWVyeSlcbiAgICAgICAgaWYocm93ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhyb3cpXG4gICAgICAgICAgICBpZihrZXlzLmxlbmd0aCAhPT0gMSkgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBleGFjdGx5IDEgZmllbGQgaW4gcXVlcnksIGdvdCAke2tleXMubGVuZ3RofWApXG4gICAgICAgICAgICByZXR1cm4gcm93W2tleXNbMF1dXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBleGVjKHF1ZXJ5OiBTcWxGcmFnKTogUHJvbWlzZTxPa1BhY2tldD4ge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoQ29ubmVjdGlvbihjb25uID0+IGNvbm4ucXVlcnkocXVlcnkpKVxuICAgIH1cblxuICAgIGFzeW5jKiBzdHJlYW08VFJlY29yZCBleHRlbmRzIG9iamVjdCA9IFJlY29yZDxzdHJpbmcsIGFueT4+KHF1ZXJ5OiBTcWxGcmFnKTogQXN5bmNHZW5lcmF0b3I8VFJlY29yZCwgdm9pZCwgYW55PiB7XG4gICAgICAgIGNvbnN0IHNxbCA9IHF1ZXJ5LnRvU3FsU3RyaW5nKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLnByaW50UXVlcmllcykge1xuICAgICAgICAgICAgY29uc3QgaGlzcWwgPSBoaWdobGlnaHQoc3FsLCB7bGFuZ3VhZ2U6ICdzcWwnLCBpZ25vcmVJbGxlZ2FsczogdHJ1ZX0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coaGlzcWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3VsdHM6IFRSZWNvcmRbXSA9IFtdO1xuICAgICAgICBsZXQgcmVzb2x2ZTogKCkgPT4gdm9pZDtcbiAgICAgICAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyID0+IHJlc29sdmUgPSByKTtcbiAgICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLnBvb2wucXVlcnkoc3FsKVxuICAgICAgICAgICAgLm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbigncmVzdWx0Jywgcm93ID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocm93KTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9IG5ldyBQcm9taXNlKHIgPT4gcmVzb2x2ZSA9IHIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgZm9yKDs7KSB7XG4gICAgICAgICAgICBhd2FpdCBwcm9taXNlO1xuICAgICAgICAgICAgeWllbGQqIHJlc3VsdHM7XG4gICAgICAgICAgICBpZihkb25lKSBicmVha1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgd2l0aENvbm5lY3Rpb248VFJlc3VsdD4oY2FsbGJhY2s6IChjb25uOlBvb2xDb25uZWN0aW9uKSA9PiBQcm9taXNlPFRSZXN1bHQ+KTogUHJvbWlzZTxUUmVzdWx0PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBvb2wuZ2V0Q29ubmVjdGlvbihhc3luYyAoZXJyLCBjb25uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY2FsbGJhY2sodGhpcy5fd3JhcChjb25uKSkpO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbm4ucmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRyYW5zYWN0aW9uPFRSZXN1bHQ+KGNhbGxiYWNrOiAoKGNvbm46UG9vbENvbm5lY3Rpb24pID0+IFByb21pc2U8VFJlc3VsdD4pfFNxbEZyYWdbXSk6IFByb21pc2U8VFJlc3VsdD4ge1xuICAgICAgICBpZihBcnJheS5pc0FycmF5KGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNhY3Rpb248YW55Pihhc3luYyBjb25uID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKGNhbGxiYWNrLm1hcChzcWwgPT4gY29ubi5xdWVyeShzcWwpKSlcbiAgICAgICAgICAgICAgICBjb25zdCBtYXBwZWQgPSB6aXAoY2FsbGJhY2ssIHJlc3VsdHMpLm1hcCgoeCxpKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHhbMF0sXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogeFsxXSxcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvcnMgPSBtYXBwZWQuZmlsdGVyKHIgPT4gci5yZXN1bHQuc3RhdHVzID09PSAncmVqZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICBpZihlcnJvcnMubGVuZ3RoKSB0aHJvdyBFcnJvcihgJHtlcnJvcnMubGVuZ3RofSBxdWVyJHtlcnJvcnMubGVuZ3RoID09PSAxID8gJ3knIDogJ2llcyd9IGZhaWxlZDoke2Vycm9ycy5tYXAoZXJyID0+IGBcXG5bJHtlcnIuaW5kZXh9XSAke2Vyci5xdWVyeS50b1NxbFN0cmluZygpfSA6OiAkeyhlcnIucmVzdWx0IGFzIGFueSkucmVhc29ufWApLmpvaW4oJycpfWApO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzOyAvLyBUT0RPOiBpcyB0aGlzIHRoZSBiZXN0IGZvcm1hdCBmb3IgdGhlIHJlc3VsdHM/XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy53aXRoQ29ubmVjdGlvbihhc3luYyBjb25uID0+IHtcbiAgICAgICAgICAgIGF3YWl0IGNvbm4ucXVlcnkoc3FsYFNUQVJUIFRSQU5TQUNUSU9OYCk7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBUUmVzdWx0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCBjYWxsYmFjayhjb25uKTtcbiAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY29ubi5xdWVyeShzcWxgUk9MTEJBQ0tgKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCBjb25uLnF1ZXJ5KHNxbGBDT01NSVRgKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfd3JhcChjb25uOiBfUG9vbENvbm5lY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb29sQ29ubmVjdGlvbihjb25uLCAhIXRoaXMuY29uZmlnLnByaW50UXVlcmllcyk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBvb2wuZW5kKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiB6aXA8QSxCPihhOiBBW10sIGI6IEJbXSk6IEFycmF5PFtBLEJdPiB7XG4gICAgaWYoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgemlwIGFycmF5czsgbGVuZ3RocyBkaWZmZXJcIik7XG4gICAgcmV0dXJuIGEubWFwKCh4LGkpID0+IFt4LGJbaV1dKTtcbn1cblxuY2xhc3MgUG9vbENvbm5lY3Rpb24ge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb25uOiBfUG9vbENvbm5lY3Rpb24sIHByaXZhdGUgcmVhZG9ubHkgcHJpbnRRdWVyaWVzOiBib29sZWFuKSB7XG5cbiAgICB9XG5cbiAgICBxdWVyeShxdWVyeTogU3FsRnJhZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzcWwgPSBxdWVyeS50b1NxbFN0cmluZygpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJpbnRRdWVyaWVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGlzcWwgPSBoaWdobGlnaHQoc3FsLCB7bGFuZ3VhZ2U6ICdzcWwnLCBpZ25vcmVJbGxlZ2FsczogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGhpc3FsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29ubi5xdWVyeShzcWwsIChlcnJvciwgcmVzdWx0cywgZmllbGRzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG59XG4iXX0=