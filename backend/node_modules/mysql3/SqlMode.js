"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var SqlMode;

(function (SqlMode) {
  SqlMode["AllowInvalidDates"] = "ALLOW_INVALID_DATES";
  SqlMode["AnsiQuotes"] = "ANSI_QUOTES";
  SqlMode["ErrorForDivisionByZero"] = "ERROR_FOR_DIVISION_BY_ZERO";
  SqlMode["HighNotPrecedence"] = "HIGH_NOT_PRECEDENCE";
  SqlMode["IgnoreSpace"] = "IGNORE_SPACE";
  SqlMode["NoAutoValueOnZero"] = "NO_AUTO_VALUE_ON_ZERO";
  SqlMode["NoBackslashEscapes"] = "NO_BACKSLASH_ESCAPES";
  SqlMode["NoDirInCreate"] = "NO_DIR_IN_CREATE";
  SqlMode["NoEngineSubstitution"] = "NO_ENGINE_SUBSTITUTION";
  SqlMode["NoUnsignedSubtraction"] = "NO_UNSIGNED_SUBTRACTION";
  SqlMode["NoZeroDate"] = "NO_ZERO_DATE";
  SqlMode["NoZeroInDate"] = "NO_ZERO_IN_DATE";
  SqlMode["OnlyFullGroupBy"] = "ONLY_FULL_GROUP_BY";
  SqlMode["PadCharToFullLength"] = "PAD_CHAR_TO_FULL_LENGTH";
  SqlMode["PipesAsConcat"] = "PIPES_AS_CONCAT";
  SqlMode["RealAsFloat"] = "REAL_AS_FLOAT";
  SqlMode["StrictAllTables"] = "STRICT_ALL_TABLES";
  SqlMode["StrictTransTables"] = "STRICT_TRANS_TABLES";
  SqlMode["TimeTruncateFractional"] = "TIME_TRUNCATE_FRACTIONAL";
  SqlMode["Ansi"] = "ANSI";
  SqlMode["Traditional"] = "TRADITIONAL";
  SqlMode["NoAutoCreateUser"] = "NO_AUTO_CREATE_USER";
})(SqlMode || (SqlMode = {}));

var _default = SqlMode;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,