"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.raw = raw;
exports.selectAs = selectAs;
exports.set = set;
exports.timestamp = timestamp;
exports.point = point;
exports.polygon = polygon;
exports.escapeValue = escapeValue;
exports.escapeLike = escapeLike;
exports.escapeId = escapeId;
exports.date = date;
exports.interval = interval;
exports.sql = sql;
exports.IntervalUnit = exports.SqlFrag = void 0;

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ID_GLOBAL_REGEXP = /`/g;
const QUAL_GLOBAL_REGEXP = /\./g;

class SqlFrag {
  constructor(sql) {
    this.sql = sql;
  }

  toString() {
    throw new Error("SqlFrag cannot be cast to string");
  }

  toSqlString() {
    return this.sql;
  }

}

exports.SqlFrag = SqlFrag;

function isSafe(x) {
  return x instanceof SqlFrag;
}

function raw(...args) {
  return sql.raw(...args);
}

function selectAs(fields) {
  return new SqlFrag(Object.keys(fields).map(fieldName => `${_escapeIdLoose(fieldName)} AS ${_escapeIdStrict(fields[fieldName])}`).join(', '));
}

function set(...args) {
  return sql.set(...args);
}

function timestamp(...args) {
  return sql.timestamp(...args);
}

function point(...args) {
  return sql.point(...args);
}

function polygon(...args) {
  return sql.polygon(...args);
}

function escapeValue(value) {
  if (isSafe(value)) return value;
  return new SqlFrag(_escapeValue(value));
}

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function escapeLike(value, escChar = '\\') {
  if (escChar.length !== 1 || escChar === '%' || escChar === '_') throw new Error("Bad escape char");
  return value.replace(new RegExp(`[%_${escapeRegExp(escChar)}]`, 'g'), m => escChar + m);
}

function _escapeValue(value) {
  if (isSafe(value)) {
    return value.toSqlString();
  }

  if (Array.isArray(value)) {
    return value.map(v => _escapeValue(v)).join(',');
  }

  if (Buffer.isBuffer(value)) {
    return `x'${value.toString('hex')}'`;
  }

  if (typeof value === 'number' || typeof value === 'bigint') {
    return String(value);
  }

  if (typeof value === 'string') {
    return _escapeString(value);
  }

  if (value === true) {
    return '1';
  }

  if (value === false) {
    return '0';
  }

  if (value === null) {
    return 'NULL';
  }

  throw new Error(`Unsupported value type: ${value}`);
}

const CHARS_REGEX = /[\x00\b\n\r\t\x1A'\\]/gu;
const CHARS_ESCAPE_MAP = {
  '\0': '\\0',
  '\b': '\\b',
  '\n': '\\n',
  '\r': '\\r',
  '\t': '\\t',
  '\x1a': '\\Z',
  '\'': "''",
  '\\': '\\\\'
};

function _escapeString(value) {
  return "'" + String(value).replace(CHARS_REGEX, m => CHARS_ESCAPE_MAP[m]) + "'";
}

function escapeId(id) {
  if (isSafe(id)) return id;
  if (Array.isArray(id)) return new SqlFrag(id.map(_escapeIdStrict).join('.'));
  return new SqlFrag(_escapeIdStrict(id));
}

function _escapeIdLoose(id) {
  if (isSafe(id)) return id.toSqlString();
  if (Array.isArray(id)) return id.map(_escapeIdStrict).join('.');
  return '`' + String(id).replace(ID_GLOBAL_REGEXP, '``').replace(QUAL_GLOBAL_REGEXP, '`.`') + '`';
}

function _escapeIdStrict(id) {
  if (isSafe(id)) return id.toSqlString();
  if (Array.isArray(id)) return id.map(_escapeIdStrict).join('.');
  return '`' + String(id).replace(ID_GLOBAL_REGEXP, '``') + '`';
}

function date(value, outputTimezone, inputTimezone) {
  const date = makeMoment(value, outputTimezone, inputTimezone);
  return new SqlFrag(`DATE'${date.format('YYYY-MM-DD')}'`);
}

function makeMoment(value, outputTimezone, inputTimezone) {
  let d;

  if (inputTimezone) {
    const zone = _momentTimezone.default.tz.zone(inputTimezone);

    if (!zone) throw new Error(`Invalid input timezone: ${inputTimezone}`);
    d = _momentTimezone.default.tz(value, zone.name);
  } else {
    d = (0, _momentTimezone.default)(value);
  }

  if (!d.isValid()) {
    throw new Error(`Input date is not valid`);
  }

  if (outputTimezone) {
    const zone = _momentTimezone.default.tz.zone(outputTimezone);

    if (!zone) throw new Error(`Invalid output timezone: ${outputTimezone}`);
    d.tz(zone.name);
  }

  return d;
}

function hasOwn(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

function toPairs(points) {
  if (!points.length) return [];
  const sample = points[0];

  if (Array.isArray(sample) && sample.length === 2) {
    return [...points];
  }

  if (hasOwn(sample, 'x') && hasOwn(sample, 'y')) {
    return points.map(pt => [pt.x, pt.y]);
  }

  if (hasOwn(sample, 'lat') && hasOwn(sample, 'lng')) {
    return points.map(pt => [pt.lat, pt.lng]);
  }

  throw new Error("Points are not in an expected format");
}

let IntervalUnit;
exports.IntervalUnit = IntervalUnit;

(function (IntervalUnit) {
  IntervalUnit["MICROSECOND"] = "MICROSECOND";
  IntervalUnit["MILLISECOND"] = "MILLISECOND";
  IntervalUnit["SECOND"] = "SECOND";
  IntervalUnit["MINUTE"] = "MINUTE";
  IntervalUnit["HOUR"] = "HOUR";
  IntervalUnit["DAY"] = "DAY";
  IntervalUnit["WEEK"] = "WEEK";
  IntervalUnit["MONTH"] = "MONTH";
  IntervalUnit["QUARTER"] = "QUARTER";
  IntervalUnit["YEAR"] = "YEAR";
})(IntervalUnit || (exports.IntervalUnit = IntervalUnit = {}));

function interval(value, unit = IntervalUnit.MILLISECOND) {
  if (unit === IntervalUnit.MILLISECOND) {
    value *= 1000;
    unit = IntervalUnit.MICROSECOND;
  }

  return new SqlFrag(`INTERVAL ${Math.round(value)} ${unit}`);
}

function sql(strings, ...values) {
  let out = [];
  let i = 0;

  for (; i < values.length; ++i) {
    out.push(strings.raw[i], escapeValue(values[i]).toSqlString());
  }

  out.push(strings.raw[i]);
  return new SqlFrag(out.join(''));
}

(function (_sql) {
  function set(fields) {
    if (Array.isArray(fields)) {
      return new SqlFrag(fields.map(f => `${escapeId(f[0]).toSqlString()}=${escapeValue(f[1]).toSqlString()}`).join(', '));
    }

    return new SqlFrag(Object.keys(fields).map(fieldName => `${_escapeIdLoose(fieldName)}=${escapeValue(fields[fieldName]).toSqlString()}`).join(', '));
  }

  _sql.set = set;

  function insert(table, data, options) {
    let q = sql`INSERT ${sql.raw((options == null ? void 0 : options.ignore) ? 'IGNORE ' : '')}INTO ${escapeId(table)} SET ${sql.set(data)}`;

    if (options == null ? void 0 : options.ignoreDupes) {
      if (options == null ? void 0 : options.updateOnDupe) {
        throw new Error("`ignoreDupes` and `updateOnDupe` are incompatible");
      }

      let firstCol;

      if (Array.isArray(data)) {
        firstCol = data[0][0];
      } else {
        firstCol = Object.keys(data)[0];
      }

      const escCol = new SqlFrag(_escapeIdLoose(firstCol));
      q = sql`${q} ON DUPLICATE KEY UPDATE ${escCol}=VALUES(${escCol})`;
    }

    if (options == null ? void 0 : options.updateOnDupe) {
      let cols;

      if (Array.isArray(data)) {
        cols = data.map(f => f[0]);
      } else {
        cols = Object.keys(data);
      }

      q = sql`${q} ON DUPLICATE KEY UPDATE ${cols.map(col => {
        const escCol = new SqlFrag(_escapeIdLoose(col));
        return sql`${escCol}=VALUES(${escCol})`;
      })}`;
    }

    return q;
  }

  _sql.insert = insert;

  function as(fields) {
    if (Array.isArray(fields)) {
      return new SqlFrag(fields.map(f => `${escapeId(f[0]).toSqlString()} AS ${_escapeString(f[1])}`).join(', '));
    }

    return new SqlFrag(Object.keys(fields).map(alias => `${_escapeIdStrict(fields[alias])} AS ${_escapeString(alias)}`).join(', '));
  }

  _sql.as = as;

  function raw(sqlString) {
    if (sqlString instanceof SqlFrag) return sqlString;
    return new SqlFrag(sqlString);
  }

  _sql.raw = raw;

  function timestamp(value, outputTimezone, inputTimezone, fsp) {
    const date = makeMoment(value, outputTimezone, inputTimezone);
    let frac = '';

    if (fsp != null) {
      if (fsp < 0 || fsp > 6) {
        throw new Error(`fsp out of range: ${fsp}`);
      } else if (fsp > 0) {
        frac = '.' + 'S'.repeat(fsp);
      }
    } else if (date.milliseconds() !== 0) {
      frac = '.SSS';
    }

    return new SqlFrag(`TIMESTAMP'${date.format(`YYYY-MM-DD HH:mm:ss${frac}`)}'`);
  }

  _sql.timestamp = timestamp;

  function point(x, y) {
    return sql`PointFromText(${`POINT(${x} ${y})`})`;
  }

  _sql.point = point;

  function polygon(points, autoComplete = true) {
    if (!points.length) throw new Error("Cannot create an empty polygon");
    points = toPairs(points);

    if (autoComplete) {
      const l = points.length - 1;

      if (!(points[0][0] === points[l][0] && points[0][1] === points[l][1])) {
        points.push([points[0][0], points[0][1]]);
      }
    }

    return sql`PolyFromText(${`POLYGON((${points.map(([x, y]) => `${x} ${y}`).join(',')}))`})`;
  }

  _sql.polygon = polygon;
})(sql || (exports.sql = sql = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,